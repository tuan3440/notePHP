Magento 2 File Structure:
  *app:
      -code:
      -design:
      -i18n
      -etc

    -All the modules that you have customer should be included in the app/code/<CompanyName>/<ModuleName> directory
    -You should store your custom store theme under the app/design/frontend subdirectory and all your admin themes should be stored in the app/design/adminhtml subdirectory.
    -to avoid custom modules being mixing with the core modules of Magento, you need to add all Magento core modules are in the vendor directory
    -app/i18n directory is a folder where the language packages are stores. In case you want to create a multi-language store which can suit your customer needs better, you can use this folder.
  
  *phpserver: 
This has the Router.php file which can be used to implement the PHP built-in server. However, you will not be recommended to work with this file has it can cause numerous potentially big security holes to your site.
  *bin
The Magento CLI executable script is stored in this directory. Using this script, Magento commands will be activated, which can become helpful in clearing cache or reindexing.
  *setup
This contains all files which are related to Magento’s installation setup
 *var : 
This includes generated classes, sessions, cache, database backups, and cached error reports. In this folder, you can generate the contents of numerous subdirectories including var/di when php bin/magento setup:di:compile is run.

var/log store Magento log files mostly are exception.log and system.log files.

var/cache contains all of Magento’s cache. You are recommended to use php bin/magento cache:clean command, to clear your cache, in order to see your development changes.

  *generated:
This is the place where Magento’s generated code is stored. In the default setting, if the class is injected in a constructor, the code will be generated by Magento to create non-existent factory classes.

  *dev: 
Stores automated functional tests which were run by the Magento Test Framework.
   
  *lib:
This contains all of Magento and vendor library files. It also includes all the non-module based Magento code.

  *pub:
An index.php file will be stored in this directory. You can use this file to run the application in production mode. This directory provides you a security measure which can restrict the public access to the root directory asset. Besides, this folder also includes your Magento theme generated static files

   *vendor :
This is a directory which contains the framework core. And here is also the place where you can install additional modules. All the operations which the vendor folder are made using the composer.json file. If you look into this folder, you will see that there is no files or folders. This is simply because the composer.json will create those files and folders. You will be able to see numerous packages that have been defined right under composer.json file.

*MOdule file structure:
    -common diretories:
      +Block :includes PHP view classes as part of module logic Model View Controller(MVC) vertical implementation.
      +Controller: includes PHP controller classes as part of module logic MVC vertical implementation.
      +etc: includes configuration files; especially the module.xml, which is required.
      +Model: includes PHP model classes as part of module logic MVC vertical implementation.
      +Setup: includes classes for module database structure and data setup. These data are invoked when installing or upgrading.

     These folders can be added for configuration or other items ancillary functions such as localization,plugin-ins, and layout files.

Api: includes any PHP classes which are exposed to the API.

Console: includes CLI commands.

Cron: includes cron job definitions.

CustomerData: includes section files.

Helper: includes aggregated functionality.

i18n: includes localization files.

Observer: includes files for executing commands which are from the listener.

Plugin: includes any needed plug-ins.

UI: includes data generation files.

view: includes view files, containing static view files, email templates, design templates, and layout files.





















